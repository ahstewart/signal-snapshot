{"ast":null,"code":"/*\n Utility helpers for decrypting and processing the Signal Desktop database.\n*/// Import CryptoJS for encryption/decryption\nimport CryptoJS from'crypto-js';// Singleton pattern for SQL.js initialization\nlet sqlJsInstance=null;let sqlJsInitPromise=null;export async function getSqlJs(){if(sqlJsInstance)return sqlJsInstance;if(!sqlJsInitPromise){sqlJsInitPromise=(async()=>{try{const[SQLModule,wasmBinary]=await Promise.all([import('sql.js'),fetch('/sql-wasm.wasm').then(res=>{if(!res.ok){throw new Error(\"Failed to fetch wasm file: \".concat(res.statusText));}return res.arrayBuffer();})]);const initSqlJs=SQLModule.default;const SQL=await initSqlJs({wasmBinary});sqlJsInstance=SQL;return SQL;}catch(err){console.error('Failed to initialize sql.js:',err);throw err;}})();}return sqlJsInitPromise;}export const initializeSQL=async()=>{return getSqlJs();};// Helper to create a new SQL.js Database instance from ArrayBuffer\nexport async function createDatabaseFromBuffer(dbBuffer){const SQL=await getSqlJs();return new SQL.Database(new Uint8Array(dbBuffer));}export async function decryptDatabase(encrypted,password){try{// The key from Signal's config is a long hex string. We only need the first 32 bytes (64 hex chars) for the AES key.\nconst keyHex=password.substring(0,64);const key=CryptoJS.enc.Hex.parse(keyHex);// The first 16 bytes of the encrypted file are the IV\nconst iv=CryptoJS.lib.WordArray.create(encrypted.slice(0,16));// The rest of the file is the ciphertext\nconst ciphertext=CryptoJS.lib.WordArray.create(encrypted.slice(16));// Decrypt using AES-256-CBC\nconst decrypted=CryptoJS.AES.decrypt({ciphertext:ciphertext},key,{iv:iv,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});// Convert the decrypted WordArray back to a Uint8Array\nconst decryptedBytes=decrypted.toString(CryptoJS.enc.Latin1);const decryptedArray=new Uint8Array(decryptedBytes.length);for(let i=0;i<decryptedBytes.length;i++){decryptedArray[i]=decryptedBytes.charCodeAt(i);}return decryptedArray.buffer;}catch(error){console.error('Error decrypting database:',error);throw new Error('Failed to decrypt database. Check if the key is correct.');}}// New handler to support both encrypted and unencrypted databases\nexport async function loadDatabase(dbBuffer,key,conversationIds){// Check for the SQLite header by comparing the first 16 bytes of the file\nconst sqliteHeader=new Uint8Array([0x53,0x51,0x4c,0x69,0x74,0x65,0x20,0x66,0x6f,0x72,0x6d,0x61,0x74,0x20,0x33,0x00// \"SQLite format 3\\0\"\n]);const fileHeader=new Uint8Array(dbBuffer.slice(0,16));const isDecrypted=fileHeader.length===sqliteHeader.length&&fileHeader.every((byte,i)=>byte===sqliteHeader[i]);if(isDecrypted){// Already decrypted, process directly\nreturn processDatabase(dbBuffer,conversationIds);}else if(key){// Encrypted, so decrypt first\nconst decryptedBuffer=await decryptDatabase(dbBuffer,key);return processDatabase(decryptedBuffer,conversationIds);}else{// Encrypted but no key provided\nthrow new Error('This database is encrypted. Please provide a key.');}}export async function processDatabase(dbBuffer,conversationIds){try{var _mostMessagesSent$,_mostReactionsGiven$,_mostReactionsReceive,_mostMentioned$,_mostEggplantsSent$,_mostMediaSent$;const db=await createDatabaseFromBuffer(dbBuffer);const buildWhereClause=function(tableAlias){let idColumn=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'conversationId';if(!conversationIds||conversationIds.length===0)return'';const prefix=tableAlias?\"\".concat(tableAlias,\".\"):'';const ids=conversationIds.map(id=>\"'\".concat(id,\"'\")).join(',');return\"WHERE \".concat(prefix).concat(idColumn,\" IN (\").concat(ids,\")\");};const messagesWhereClause=buildWhereClause();const reactionsWhereClause=buildWhereClause();const conversationsWhereClause=buildWhereClause(undefined,'id');const messagesJoinWhereClause=buildWhereClause('m');const analytics={all_conversations:[],message_counts:{by_day:{},by_hour:{}},top_conversations:[],kpis:{total_messages:0,total_conversations:0,avg_messages_per_day:0},reactions:{total_reactions:0,top_emojis:[],top_emojis_by_author:{}},awards:{most_messages_sent:{winner:null,count:0},most_reactions_given:{winner:null,count:0},most_reactions_received:{winner:null,count:0},most_mentioned:{winner:null,count:0},most_eggplants_sent:{winner:null,count:0},most_media_sent:{winner:null,count:0}}};if(!conversationIds||conversationIds.length===0){const allConvosResults=db.exec(\"\\n        SELECT id, COALESCE(name, profileName, e164, id) as conversation_name\\n        FROM conversations ORDER BY conversation_name ASC\\n      \");if(allConvosResults[0]){analytics.all_conversations=allConvosResults[0].values.map(_ref=>{let[id,name]=_ref;return{id,name};});}}// Standard Analytics Queries\nconst byDayResults=db.exec(\"SELECT DATE(sent_at/1000, 'unixepoch') as date, COUNT(*) as count FROM messages \".concat(messagesWhereClause,\" GROUP BY date ORDER BY date ASC\"));const byHourResults=db.exec(\"SELECT strftime('%H', sent_at/1000, 'unixepoch') as hour, COUNT(*) as count FROM messages \".concat(messagesWhereClause,\" GROUP BY hour ORDER BY hour ASC\"));const topConvoResults=db.exec(\"SELECT COALESCE(c.name, c.profileName, c.e164, c.id) as name, COUNT(m.rowid) as count FROM messages m JOIN conversations c ON m.conversationId = c.id \".concat(messagesJoinWhereClause,\" GROUP BY name ORDER BY count DESC LIMIT 5\"));const kpiResults=db.exec(\"SELECT (SELECT COUNT(*) FROM messages \".concat(messagesWhereClause,\") as total_messages, (SELECT COUNT(*) FROM conversations \").concat(conversationsWhereClause,\") as total_conversations\"));const reactionResults=db.exec(\"SELECT emoji, fromId, COUNT(*) as count FROM reactions \".concat(reactionsWhereClause,\" GROUP BY emoji, fromId\"));// Award Queries\nconst mostMessagesSentQuery=\"SELECT source, COUNT(*) as count FROM messages \".concat(messagesWhereClause?\"\".concat(messagesWhereClause,\" AND\"):'WHERE',\" source IS NOT NULL GROUP BY source ORDER BY count DESC LIMIT 1\");const mostReactionsGivenQuery=\"SELECT fromId, COUNT(*) as count FROM reactions \".concat(reactionsWhereClause?\"\".concat(reactionsWhereClause,\" AND\"):'WHERE',\" fromId IS NOT NULL GROUP BY fromId ORDER BY count DESC LIMIT 1\");const mostReactionsReceivedQuery=\"SELECT targetAuthorAci, COUNT(*) as count FROM reactions \".concat(reactionsWhereClause?\"\".concat(reactionsWhereClause,\" AND\"):'WHERE',\" targetAuthorAci IS NOT NULL GROUP BY targetAuthorAci ORDER BY count DESC LIMIT 1\");const mostMentionedQuery=\"SELECT mn.mentionAci, COUNT(*) as count FROM mentions mn JOIN messages m ON mn.messageId = m.id \".concat(messagesJoinWhereClause,\" \").concat(messagesJoinWhereClause?'AND':'WHERE',\" mn.mentionAci IS NOT NULL GROUP BY mn.mentionAci ORDER BY count DESC LIMIT 1\");const mostEggplantsSentQuery=\"SELECT source, COUNT(*) as count FROM messages \".concat(messagesWhereClause?\"\".concat(messagesWhereClause,\" AND\"):'WHERE',\" body LIKE '%\\uD83C\\uDF46%' AND source IS NOT NULL GROUP BY source ORDER BY count DESC LIMIT 1\");const mostMediaSentQuery=\"SELECT source, COUNT(*) as count FROM messages \".concat(messagesWhereClause?\"\".concat(messagesWhereClause,\" AND\"):'WHERE',\" hasAttachments = 1 AND source IS NOT NULL GROUP BY source ORDER BY count DESC LIMIT 1\");const[mostMessagesSent,mostReactionsGiven,mostReactionsReceived,mostMentioned,mostEggplantsSent,mostMediaSent]=[db.exec(mostMessagesSentQuery),db.exec(mostReactionsGivenQuery),db.exec(mostReactionsReceivedQuery),db.exec(mostMentionedQuery),db.exec(mostEggplantsSentQuery),db.exec(mostMediaSentQuery)];// Process results\nif(byDayResults[0])analytics.message_counts.by_day=Object.fromEntries(byDayResults[0].values);if(byHourResults[0])analytics.message_counts.by_hour=Object.fromEntries(byHourResults[0].values);if(topConvoResults[0])analytics.top_conversations=topConvoResults[0].values.map(_ref2=>{let[name,count]=_ref2;return{name,count};});if(kpiResults[0]){const[total_messages,total_conversations]=kpiResults[0].values[0];analytics.kpis={total_messages,total_conversations,avg_messages_per_day:Object.keys(analytics.message_counts.by_day).length?Math.round(total_messages/Object.keys(analytics.message_counts.by_day).length):0};}if(reactionResults[0]){const emojiCounts={};const authorEmojiCounts={};reactionResults[0].values.forEach(_ref3=>{let[emoji,fromId,count]=_ref3;analytics.reactions.total_reactions+=count;emojiCounts[emoji]=(emojiCounts[emoji]||0)+count;if(!authorEmojiCounts[fromId])authorEmojiCounts[fromId]={};authorEmojiCounts[fromId][emoji]=(authorEmojiCounts[fromId][emoji]||0)+count;});analytics.reactions.top_emojis=Object.entries(emojiCounts).sort((_ref4,_ref5)=>{let[,a]=_ref4;let[,b]=_ref5;return b-a;}).slice(0,10).map(_ref6=>{let[emoji,count]=_ref6;return{emoji,count};});for(const authorId in authorEmojiCounts){analytics.reactions.top_emojis_by_author[authorId]=Object.entries(authorEmojiCounts[authorId]).sort((_ref7,_ref8)=>{let[,a]=_ref7;let[,b]=_ref8;return b-a;}).slice(0,3).map(_ref9=>{let[emoji,count]=_ref9;return{emoji,count};});}}// Process Award Results\nif((_mostMessagesSent$=mostMessagesSent[0])!==null&&_mostMessagesSent$!==void 0&&_mostMessagesSent$.values[0]){const[winner,count]=mostMessagesSent[0].values[0];analytics.awards.most_messages_sent={winner,count};}if((_mostReactionsGiven$=mostReactionsGiven[0])!==null&&_mostReactionsGiven$!==void 0&&_mostReactionsGiven$.values[0]){const[winner,count]=mostReactionsGiven[0].values[0];analytics.awards.most_reactions_given={winner,count};}if((_mostReactionsReceive=mostReactionsReceived[0])!==null&&_mostReactionsReceive!==void 0&&_mostReactionsReceive.values[0]){const[winner,count]=mostReactionsReceived[0].values[0];analytics.awards.most_reactions_received={winner,count};}if((_mostMentioned$=mostMentioned[0])!==null&&_mostMentioned$!==void 0&&_mostMentioned$.values[0]){const[winner,count]=mostMentioned[0].values[0];analytics.awards.most_mentioned={winner,count};}if((_mostEggplantsSent$=mostEggplantsSent[0])!==null&&_mostEggplantsSent$!==void 0&&_mostEggplantsSent$.values[0]){const[winner,count]=mostEggplantsSent[0].values[0];analytics.awards.most_eggplants_sent={winner,count};}if((_mostMediaSent$=mostMediaSent[0])!==null&&_mostMediaSent$!==void 0&&_mostMediaSent$.values[0]){const[winner,count]=mostMediaSent[0].values[0];analytics.awards.most_media_sent={winner,count};}return analytics;}catch(error){console.error('Error processing database:',error);throw new Error('Failed to process database');}}export async function getUsers(dbBuffer){try{var _messageSendersResult,_reactionGiversResult,_reactionReceiversRes;const db=await createDatabaseFromBuffer(dbBuffer);const messageSendersQuery=\"SELECT DISTINCT source FROM messages WHERE source IS NOT NULL\";const messageSendersResult=db.exec(messageSendersQuery);const messageSenders=((_messageSendersResult=messageSendersResult[0])===null||_messageSendersResult===void 0?void 0:_messageSendersResult.values.map(_ref0=>{let[id]=_ref0;return id;}))||[];const reactionGiversQuery=\"SELECT DISTINCT fromId FROM reactions WHERE fromId IS NOT NULL\";const reactionGiversResult=db.exec(reactionGiversQuery);const reactionGivers=((_reactionGiversResult=reactionGiversResult[0])===null||_reactionGiversResult===void 0?void 0:_reactionGiversResult.values.map(_ref1=>{let[id]=_ref1;return id;}))||[];const reactionReceiversQuery=\"SELECT DISTINCT targetAuthorAci FROM reactions WHERE targetAuthorAci IS NOT NULL\";const reactionReceiversResult=db.exec(reactionReceiversQuery);const reactionReceivers=((_reactionReceiversRes=reactionReceiversResult[0])===null||_reactionReceiversRes===void 0?void 0:_reactionReceiversRes.values.map(_ref10=>{let[id]=_ref10;return id;}))||[];const allUserIds=[...new Set([...messageSenders,...reactionGivers,...reactionReceivers])];const users=allUserIds.map(id=>({id:id,name:id})).sort((a,b)=>a.name.localeCompare(b.name));return users;}catch(error){console.error('Error getting users:',error);throw new Error('Failed to get users from the database.');}}export async function getIndividualStats(dbBuffer,userId){try{var _totalMessagesResult$,_totalMessagesResult$2,_popularDayResult$,_popularDayResult$$va,_totalReactionsResult,_totalReactionsResult2;const db=await createDatabaseFromBuffer(dbBuffer);const totalMessagesQuery=\"SELECT COUNT(*) FROM messages WHERE source = '\".concat(userId,\"'\");const totalMessagesResult=db.exec(totalMessagesQuery);const totalMessagesSent=((_totalMessagesResult$=totalMessagesResult[0])===null||_totalMessagesResult$===void 0?void 0:(_totalMessagesResult$2=_totalMessagesResult$.values[0])===null||_totalMessagesResult$2===void 0?void 0:_totalMessagesResult$2[0])||0;const popularDayQuery=\"\\n      SELECT\\n        CASE CAST(strftime('%w', sent_at/1000, 'unixepoch') AS INTEGER)\\n          WHEN 0 THEN 'Sunday'\\n          WHEN 1 THEN 'Monday'\\n          WHEN 2 THEN 'Tuesday'\\n          WHEN 3 THEN 'Wednesday'\\n          WHEN 4 THEN 'Thursday'\\n          WHEN 5 THEN 'Friday'\\n          ELSE 'Saturday'\\n        END as day,\\n        COUNT(*) as count\\n      FROM messages\\n      WHERE source = '\".concat(userId,\"'\\n      GROUP BY day\\n      ORDER BY count DESC\\n      LIMIT 1;\\n    \");const popularDayResult=db.exec(popularDayQuery);const mostPopularDay=((_popularDayResult$=popularDayResult[0])===null||_popularDayResult$===void 0?void 0:(_popularDayResult$$va=_popularDayResult$.values[0])===null||_popularDayResult$$va===void 0?void 0:_popularDayResult$$va[0])||'N/A';const totalReactionsQuery=\"SELECT COUNT(*) FROM reactions WHERE fromId = '\".concat(userId,\"'\");const totalReactionsResult=db.exec(totalReactionsQuery);const totalReactionsSent=((_totalReactionsResult=totalReactionsResult[0])===null||_totalReactionsResult===void 0?void 0:(_totalReactionsResult2=_totalReactionsResult.values[0])===null||_totalReactionsResult2===void 0?void 0:_totalReactionsResult2[0])||0;return{totalMessagesSent,mostPopularDay,totalReactionsSent};}catch(error){console.error(\"Error getting stats for user \".concat(userId,\":\"),error);throw new Error('Failed to get individual stats.');}}export async function loadUsers(dbBuffer,key){const sqliteHeader=new Uint8Array([0x53,0x51,0x4c,0x69,0x74,0x65,0x20,0x66,0x6f,0x72,0x6d,0x61,0x74,0x20,0x33,0x00]);const fileHeader=new Uint8Array(dbBuffer.slice(0,16));const isDecrypted=fileHeader.length===sqliteHeader.length&&fileHeader.every((byte,i)=>byte===sqliteHeader[i]);if(isDecrypted){return getUsers(dbBuffer);}else if(key){const decryptedBuffer=await decryptDatabase(dbBuffer,key);return getUsers(decryptedBuffer);}else{throw new Error('This database is encrypted. Please provide a key.');}}export async function loadIndividualStats(dbBuffer,key,userId){const sqliteHeader=new Uint8Array([0x53,0x51,0x4c,0x69,0x74,0x65,0x20,0x66,0x6f,0x72,0x6d,0x61,0x74,0x20,0x33,0x00]);const fileHeader=new Uint8Array(dbBuffer.slice(0,16));const isDecrypted=fileHeader.length===sqliteHeader.length&&fileHeader.every((byte,i)=>byte===sqliteHeader[i]);if(isDecrypted){return getIndividualStats(dbBuffer,userId);}else if(key){const decryptedBuffer=await decryptDatabase(dbBuffer,key);return getIndividualStats(decryptedBuffer,userId);}else{throw new Error('This database is encrypted. Please provide a key.');}}","map":{"version":3,"names":["CryptoJS","sqlJsInstance","sqlJsInitPromise","getSqlJs","SQLModule","wasmBinary","Promise","all","fetch","then","res","ok","Error","concat","statusText","arrayBuffer","initSqlJs","default","SQL","err","console","error","initializeSQL","createDatabaseFromBuffer","dbBuffer","Database","Uint8Array","decryptDatabase","encrypted","password","keyHex","substring","key","enc","Hex","parse","iv","lib","WordArray","create","slice","ciphertext","decrypted","AES","decrypt","mode","CBC","padding","pad","Pkcs7","decryptedBytes","toString","Latin1","decryptedArray","length","i","charCodeAt","buffer","loadDatabase","conversationIds","sqliteHeader","fileHeader","isDecrypted","every","byte","processDatabase","decryptedBuffer","_mostMessagesSent$","_mostReactionsGiven$","_mostReactionsReceive","_mostMentioned$","_mostEggplantsSent$","_mostMediaSent$","db","buildWhereClause","tableAlias","idColumn","arguments","undefined","prefix","ids","map","id","join","messagesWhereClause","reactionsWhereClause","conversationsWhereClause","messagesJoinWhereClause","analytics","all_conversations","message_counts","by_day","by_hour","top_conversations","kpis","total_messages","total_conversations","avg_messages_per_day","reactions","total_reactions","top_emojis","top_emojis_by_author","awards","most_messages_sent","winner","count","most_reactions_given","most_reactions_received","most_mentioned","most_eggplants_sent","most_media_sent","allConvosResults","exec","values","_ref","name","byDayResults","byHourResults","topConvoResults","kpiResults","reactionResults","mostMessagesSentQuery","mostReactionsGivenQuery","mostReactionsReceivedQuery","mostMentionedQuery","mostEggplantsSentQuery","mostMediaSentQuery","mostMessagesSent","mostReactionsGiven","mostReactionsReceived","mostMentioned","mostEggplantsSent","mostMediaSent","Object","fromEntries","_ref2","keys","Math","round","emojiCounts","authorEmojiCounts","forEach","_ref3","emoji","fromId","entries","sort","_ref4","_ref5","a","b","_ref6","authorId","_ref7","_ref8","_ref9","getUsers","_messageSendersResult","_reactionGiversResult","_reactionReceiversRes","messageSendersQuery","messageSendersResult","messageSenders","_ref0","reactionGiversQuery","reactionGiversResult","reactionGivers","_ref1","reactionReceiversQuery","reactionReceiversResult","reactionReceivers","_ref10","allUserIds","Set","users","localeCompare","getIndividualStats","userId","_totalMessagesResult$","_totalMessagesResult$2","_popularDayResult$","_popularDayResult$$va","_totalReactionsResult","_totalReactionsResult2","totalMessagesQuery","totalMessagesResult","totalMessagesSent","popularDayQuery","popularDayResult","mostPopularDay","totalReactionsQuery","totalReactionsResult","totalReactionsSent","loadUsers","loadIndividualStats"],"sources":["E:/ahste/Projects/signal-analytics/frontend/src/utils/database.ts"],"sourcesContent":["/*\n Utility helpers for decrypting and processing the Signal Desktop database.\n*/\n\n// Import CryptoJS for encryption/decryption\nimport CryptoJS from 'crypto-js';\n\n// Singleton pattern for SQL.js initialization\nlet sqlJsInstance: any = null;\nlet sqlJsInitPromise: Promise<any> | null = null;\n\nexport async function getSqlJs() {\n  if (sqlJsInstance) return sqlJsInstance;\n  if (!sqlJsInitPromise) {\n    sqlJsInitPromise = (async () => {\n      try {\n        const [SQLModule, wasmBinary] = await Promise.all([\n          import('sql.js'),\n          fetch('/sql-wasm.wasm').then(res => {\n            if (!res.ok) {\n              throw new Error(`Failed to fetch wasm file: ${res.statusText}`);\n            }\n            return res.arrayBuffer();\n          })\n        ]);\n\n        const initSqlJs = SQLModule.default as unknown as (config: any) => Promise<any>;\n        const SQL = await initSqlJs({ wasmBinary });\n        sqlJsInstance = SQL;\n        return SQL;\n      } catch (err) {\n        console.error('Failed to initialize sql.js:', err);\n        throw err;\n      }\n    })();\n  }\n  return sqlJsInitPromise;\n}\n\nexport const initializeSQL = async () => {\n  return getSqlJs();\n};\n\n// Helper to create a new SQL.js Database instance from ArrayBuffer\nexport async function createDatabaseFromBuffer(dbBuffer: ArrayBuffer) {\n  const SQL = await getSqlJs();\n  return new SQL.Database(new Uint8Array(dbBuffer));\n}\n\nexport interface Conversation {\n  id: string;\n  name: string;\n}\n\nexport interface Award {\n  winner: string | null;\n  count: number;\n}\n\nexport interface AnalyticsData {\n  all_conversations: Conversation[];\n  message_counts: {\n    by_day: Record<string, number>;\n    by_hour: Record<string, number>;\n  };\n  top_conversations: {\n    name: string;\n    count: number;\n  }[];\n  kpis: {\n    total_messages: number;\n    total_conversations: number;\n    avg_messages_per_day: number;\n  };\n  reactions: {\n    total_reactions: number;\n    top_emojis: { emoji: string; count: number }[];\n    top_emojis_by_author: Record<string, { emoji: string; count: number }[]>;\n  };\n  awards: {\n    most_messages_sent: Award;\n    most_reactions_given: Award;\n    most_reactions_received: Award;\n    most_mentioned: Award;\n    most_eggplants_sent: Award;\n    most_media_sent: Award;\n  };\n}\n\nexport async function decryptDatabase(\n  encrypted: ArrayBuffer,\n  password: string\n): Promise<ArrayBuffer> {\n  try {\n    // The key from Signal's config is a long hex string. We only need the first 32 bytes (64 hex chars) for the AES key.\n    const keyHex = password.substring(0, 64);\n    const key = CryptoJS.enc.Hex.parse(keyHex);\n\n    // The first 16 bytes of the encrypted file are the IV\n    const iv = CryptoJS.lib.WordArray.create(encrypted.slice(0, 16));\n\n    // The rest of the file is the ciphertext\n    const ciphertext = CryptoJS.lib.WordArray.create(encrypted.slice(16));\n\n    // Decrypt using AES-256-CBC\n    const decrypted = CryptoJS.AES.decrypt(\n      { ciphertext: ciphertext } as any,\n      key,\n      {\n        iv: iv,\n        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.Pkcs7,\n      }\n    );\n\n    // Convert the decrypted WordArray back to a Uint8Array\n    const decryptedBytes = decrypted.toString(CryptoJS.enc.Latin1);\n    const decryptedArray = new Uint8Array(decryptedBytes.length);\n    for (let i = 0; i < decryptedBytes.length; i++) {\n      decryptedArray[i] = decryptedBytes.charCodeAt(i);\n    }\n\n    return decryptedArray.buffer;\n  } catch (error) {\n    console.error('Error decrypting database:', error);\n    throw new Error('Failed to decrypt database. Check if the key is correct.');\n  }\n}\n\n// New handler to support both encrypted and unencrypted databases\nexport async function loadDatabase(\n  dbBuffer: ArrayBuffer,\n  key?: string,\n  conversationIds?: string[]\n): Promise<AnalyticsData> {\n  // Check for the SQLite header by comparing the first 16 bytes of the file\n  const sqliteHeader = new Uint8Array([\n    0x53, 0x51, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,\n    0x20, 0x33, 0x00, // \"SQLite format 3\\0\"\n  ]);\n  const fileHeader = new Uint8Array(dbBuffer.slice(0, 16));\n\n  const isDecrypted =\n    fileHeader.length === sqliteHeader.length &&\n    fileHeader.every((byte, i) => byte === sqliteHeader[i]);\n\n  if (isDecrypted) {\n    // Already decrypted, process directly\n    return processDatabase(dbBuffer, conversationIds);\n  } else if (key) {\n    // Encrypted, so decrypt first\n    const decryptedBuffer = await decryptDatabase(dbBuffer, key);\n    return processDatabase(decryptedBuffer, conversationIds);\n  } else {\n    // Encrypted but no key provided\n    throw new Error('This database is encrypted. Please provide a key.');\n  }\n}\n\nexport async function processDatabase(\n  dbBuffer: ArrayBuffer,\n  conversationIds?: string[]\n): Promise<AnalyticsData> {\n  try {\n    const db = await createDatabaseFromBuffer(dbBuffer);\n    const buildWhereClause = (tableAlias?: string, idColumn: string = 'conversationId') => {\n      if (!conversationIds || conversationIds.length === 0) return '';\n      const prefix = tableAlias ? `${tableAlias}.` : '';\n      const ids = conversationIds.map(id => `'${id}'`).join(',');\n      return `WHERE ${prefix}${idColumn} IN (${ids})`;\n    };\n\n    const messagesWhereClause = buildWhereClause();\n    const reactionsWhereClause = buildWhereClause();\n    const conversationsWhereClause = buildWhereClause(undefined, 'id');\n    const messagesJoinWhereClause = buildWhereClause('m');\n\n    const analytics: AnalyticsData = {\n      all_conversations: [],\n      message_counts: { by_day: {}, by_hour: {} },\n      top_conversations: [],\n      kpis: { total_messages: 0, total_conversations: 0, avg_messages_per_day: 0 },\n      reactions: { total_reactions: 0, top_emojis: [], top_emojis_by_author: {} },\n      awards: {\n        most_messages_sent: { winner: null, count: 0 },\n        most_reactions_given: { winner: null, count: 0 },\n        most_reactions_received: { winner: null, count: 0 },\n        most_mentioned: { winner: null, count: 0 },\n        most_eggplants_sent: { winner: null, count: 0 },\n        most_media_sent: { winner: null, count: 0 },\n      },\n    };\n\n    if (!conversationIds || conversationIds.length === 0) {\n      const allConvosResults = db.exec(`\n        SELECT id, COALESCE(name, profileName, e164, id) as conversation_name\n        FROM conversations ORDER BY conversation_name ASC\n      `);\n      if (allConvosResults[0]) {\n        analytics.all_conversations = allConvosResults[0].values.map(([id, name]: [string, string]) => ({ id, name }));\n      }\n    }\n\n    // Standard Analytics Queries\n    const byDayResults = db.exec(`SELECT DATE(sent_at/1000, 'unixepoch') as date, COUNT(*) as count FROM messages ${messagesWhereClause} GROUP BY date ORDER BY date ASC`);\n    const byHourResults = db.exec(`SELECT strftime('%H', sent_at/1000, 'unixepoch') as hour, COUNT(*) as count FROM messages ${messagesWhereClause} GROUP BY hour ORDER BY hour ASC`);\n    const topConvoResults = db.exec(`SELECT COALESCE(c.name, c.profileName, c.e164, c.id) as name, COUNT(m.rowid) as count FROM messages m JOIN conversations c ON m.conversationId = c.id ${messagesJoinWhereClause} GROUP BY name ORDER BY count DESC LIMIT 5`);\n    const kpiResults = db.exec(`SELECT (SELECT COUNT(*) FROM messages ${messagesWhereClause}) as total_messages, (SELECT COUNT(*) FROM conversations ${conversationsWhereClause}) as total_conversations`);\n    const reactionResults = db.exec(`SELECT emoji, fromId, COUNT(*) as count FROM reactions ${reactionsWhereClause} GROUP BY emoji, fromId`);\n\n    // Award Queries\n    const mostMessagesSentQuery = `SELECT source, COUNT(*) as count FROM messages ${messagesWhereClause ? `${messagesWhereClause} AND` : 'WHERE'} source IS NOT NULL GROUP BY source ORDER BY count DESC LIMIT 1`;\n    const mostReactionsGivenQuery = `SELECT fromId, COUNT(*) as count FROM reactions ${reactionsWhereClause ? `${reactionsWhereClause} AND` : 'WHERE'} fromId IS NOT NULL GROUP BY fromId ORDER BY count DESC LIMIT 1`;\n    const mostReactionsReceivedQuery = `SELECT targetAuthorAci, COUNT(*) as count FROM reactions ${reactionsWhereClause ? `${reactionsWhereClause} AND` : 'WHERE'} targetAuthorAci IS NOT NULL GROUP BY targetAuthorAci ORDER BY count DESC LIMIT 1`;\n    const mostMentionedQuery = `SELECT mn.mentionAci, COUNT(*) as count FROM mentions mn JOIN messages m ON mn.messageId = m.id ${messagesJoinWhereClause} ${messagesJoinWhereClause ? 'AND' : 'WHERE'} mn.mentionAci IS NOT NULL GROUP BY mn.mentionAci ORDER BY count DESC LIMIT 1`;\n    const mostEggplantsSentQuery = `SELECT source, COUNT(*) as count FROM messages ${messagesWhereClause ? `${messagesWhereClause} AND` : 'WHERE'} body LIKE '%🍆%' AND source IS NOT NULL GROUP BY source ORDER BY count DESC LIMIT 1`;\n    const mostMediaSentQuery = `SELECT source, COUNT(*) as count FROM messages ${messagesWhereClause ? `${messagesWhereClause} AND` : 'WHERE'} hasAttachments = 1 AND source IS NOT NULL GROUP BY source ORDER BY count DESC LIMIT 1`;\n\n    const [mostMessagesSent, mostReactionsGiven, mostReactionsReceived, mostMentioned, mostEggplantsSent, mostMediaSent] = [\n      db.exec(mostMessagesSentQuery),\n      db.exec(mostReactionsGivenQuery),\n      db.exec(mostReactionsReceivedQuery),\n      db.exec(mostMentionedQuery),\n      db.exec(mostEggplantsSentQuery),\n      db.exec(mostMediaSentQuery),\n    ];\n\n    // Process results\n    if (byDayResults[0]) analytics.message_counts.by_day = Object.fromEntries(byDayResults[0].values);\n    if (byHourResults[0]) analytics.message_counts.by_hour = Object.fromEntries(byHourResults[0].values);\n    if (topConvoResults[0]) analytics.top_conversations = topConvoResults[0].values.map(([name, count]: [string, number]) => ({ name, count }));\n    if (kpiResults[0]) {\n      const [total_messages, total_conversations] = kpiResults[0].values[0] as [number, number];\n      analytics.kpis = {\n        total_messages,\n        total_conversations,\n        avg_messages_per_day: Object.keys(analytics.message_counts.by_day).length ? Math.round(total_messages / Object.keys(analytics.message_counts.by_day).length) : 0,\n      };\n    }\n    if (reactionResults[0]) {\n      const emojiCounts: Record<string, number> = {};\n      const authorEmojiCounts: Record<string, Record<string, number>> = {};\n      reactionResults[0].values.forEach(([emoji, fromId, count]: [string, string, number]) => {\n        analytics.reactions.total_reactions += count;\n        emojiCounts[emoji] = (emojiCounts[emoji] || 0) + count;\n        if (!authorEmojiCounts[fromId]) authorEmojiCounts[fromId] = {};\n        authorEmojiCounts[fromId][emoji] = (authorEmojiCounts[fromId][emoji] || 0) + count;\n      });\n      analytics.reactions.top_emojis = Object.entries(emojiCounts).sort(([, a], [, b]) => b - a).slice(0, 10).map(([emoji, count]) => ({ emoji, count }));\n      for (const authorId in authorEmojiCounts) {\n        analytics.reactions.top_emojis_by_author[authorId] = Object.entries(authorEmojiCounts[authorId]).sort(([, a], [, b]) => b - a).slice(0, 3).map(([emoji, count]) => ({ emoji, count }));\n      }\n    }\n\n    // Process Award Results\n    if (mostMessagesSent[0]?.values[0]) {\n      const [winner, count] = mostMessagesSent[0].values[0] as [string, number];\n      analytics.awards.most_messages_sent = { winner, count };\n    }\n    if (mostReactionsGiven[0]?.values[0]) {\n      const [winner, count] = mostReactionsGiven[0].values[0] as [string, number];\n      analytics.awards.most_reactions_given = { winner, count };\n    }\n    if (mostReactionsReceived[0]?.values[0]) {\n      const [winner, count] = mostReactionsReceived[0].values[0] as [string, number];\n      analytics.awards.most_reactions_received = { winner, count };\n    }\n    if (mostMentioned[0]?.values[0]) {\n      const [winner, count] = mostMentioned[0].values[0] as [string, number];\n      analytics.awards.most_mentioned = { winner, count };\n    }\n    if (mostEggplantsSent[0]?.values[0]) {\n      const [winner, count] = mostEggplantsSent[0].values[0] as [string, number];\n      analytics.awards.most_eggplants_sent = { winner, count };\n    }\n    if (mostMediaSent[0]?.values[0]) {\n      const [winner, count] = mostMediaSent[0].values[0] as [string, number];\n      analytics.awards.most_media_sent = { winner, count };\n    }\n\n    return analytics;\n  } catch (error) {\n    console.error('Error processing database:', error);\n    throw new Error('Failed to process database');\n  }\n}\n\nexport interface User {\n  id: string;\n  name: string;\n}\n\nexport interface IndividualStatsData {\n  totalMessagesSent: number;\n  mostPopularDay: string;\n  totalReactionsSent: number;\n}\n\nexport async function getUsers(dbBuffer: ArrayBuffer): Promise<User[]> {\n  try {\n    const db = await createDatabaseFromBuffer(dbBuffer);\n    const messageSendersQuery = `SELECT DISTINCT source FROM messages WHERE source IS NOT NULL`;\n    const messageSendersResult = db.exec(messageSendersQuery);\n    const messageSenders = messageSendersResult[0]?.values.map(([id]: [string]) => id) || [];\n\n    const reactionGiversQuery = `SELECT DISTINCT fromId FROM reactions WHERE fromId IS NOT NULL`;\n    const reactionGiversResult = db.exec(reactionGiversQuery);\n    const reactionGivers = reactionGiversResult[0]?.values.map(([id]: [string]) => id) || [];\n\n    const reactionReceiversQuery = `SELECT DISTINCT targetAuthorAci FROM reactions WHERE targetAuthorAci IS NOT NULL`;\n    const reactionReceiversResult = db.exec(reactionReceiversQuery);\n    const reactionReceivers = reactionReceiversResult[0]?.values.map(([id]: [string]) => id) || [];\n\n    const allUserIds = [...new Set([...messageSenders, ...reactionGivers, ...reactionReceivers])];\n\n    const users: User[] = allUserIds.map(id => ({\n      id: id,\n      name: id,\n    })).sort((a, b) => a.name.localeCompare(b.name));\n\n    return users;\n  } catch (error) {\n    console.error('Error getting users:', error);\n    throw new Error('Failed to get users from the database.');\n  }\n}\n\nexport async function getIndividualStats(\n  dbBuffer: ArrayBuffer,\n  userId: string\n): Promise<IndividualStatsData> {\n  try {\n    const db = await createDatabaseFromBuffer(dbBuffer);\n\n    const totalMessagesQuery = `SELECT COUNT(*) FROM messages WHERE source = '${userId}'`;\n    const totalMessagesResult = db.exec(totalMessagesQuery);\n    const totalMessagesSent = totalMessagesResult[0]?.values[0]?.[0] as number || 0;\n\n    const popularDayQuery = `\n      SELECT\n        CASE CAST(strftime('%w', sent_at/1000, 'unixepoch') AS INTEGER)\n          WHEN 0 THEN 'Sunday'\n          WHEN 1 THEN 'Monday'\n          WHEN 2 THEN 'Tuesday'\n          WHEN 3 THEN 'Wednesday'\n          WHEN 4 THEN 'Thursday'\n          WHEN 5 THEN 'Friday'\n          ELSE 'Saturday'\n        END as day,\n        COUNT(*) as count\n      FROM messages\n      WHERE source = '${userId}'\n      GROUP BY day\n      ORDER BY count DESC\n      LIMIT 1;\n    `;\n    const popularDayResult = db.exec(popularDayQuery);\n    const mostPopularDay = popularDayResult[0]?.values[0]?.[0] as string || 'N/A';\n\n    const totalReactionsQuery = `SELECT COUNT(*) FROM reactions WHERE fromId = '${userId}'`;\n    const totalReactionsResult = db.exec(totalReactionsQuery);\n    const totalReactionsSent = totalReactionsResult[0]?.values[0]?.[0] as number || 0;\n\n    return {\n      totalMessagesSent,\n      mostPopularDay,\n      totalReactionsSent,\n    };\n  } catch (error) {\n    console.error(`Error getting stats for user ${userId}:`, error);\n    throw new Error('Failed to get individual stats.');\n  }\n}\n\nexport async function loadUsers(\n  dbBuffer: ArrayBuffer,\n  key?: string\n): Promise<User[]> {\n  const sqliteHeader = new Uint8Array([\n    0x53, 0x51, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,\n    0x20, 0x33, 0x00,\n  ]);\n  const fileHeader = new Uint8Array(dbBuffer.slice(0, 16));\n  const isDecrypted = fileHeader.length === sqliteHeader.length && fileHeader.every((byte, i) => byte === sqliteHeader[i]);\n\n  if (isDecrypted) {\n    return getUsers(dbBuffer);\n  } else if (key) {\n    const decryptedBuffer = await decryptDatabase(dbBuffer, key);\n    return getUsers(decryptedBuffer);\n  } else {\n    throw new Error('This database is encrypted. Please provide a key.');\n  }\n}\n\nexport async function loadIndividualStats(\n  dbBuffer: ArrayBuffer,\n  key: string | undefined,\n  userId: string\n): Promise<IndividualStatsData> {\n  const sqliteHeader = new Uint8Array([\n    0x53, 0x51, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,\n    0x20, 0x33, 0x00,\n  ]);\n  const fileHeader = new Uint8Array(dbBuffer.slice(0, 16));\n  const isDecrypted = fileHeader.length === sqliteHeader.length && fileHeader.every((byte, i) => byte === sqliteHeader[i]);\n\n  if (isDecrypted) {\n    return getIndividualStats(dbBuffer, userId);\n  } else if (key) {\n    const decryptedBuffer = await decryptDatabase(dbBuffer, key);\n    return getIndividualStats(decryptedBuffer, userId);\n  } else {\n    throw new Error('This database is encrypted. Please provide a key.');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}